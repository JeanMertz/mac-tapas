#!/usr/bin/env ruby

# With special thanks to:
# => https://github.com/kitchenplan/kitchenplan

if ENV['USER'] == 'root'
  abort 'Run this as a normal user.'
end

tapas = File.new(__FILE__)

unless tapas.flock(File::LOCK_EX | File::LOCK_NB)
  abort 'You are already running a tapas process.'
end

at_exit { tapas.flock(File::LOCK_UN) }

Dir.chdir(File.expand_path(File.dirname(__FILE__)))

# Flags
require 'optparse'

options = {}
OptionParser.new do |opts|
    opts.banner = 'Usage: tapas [options]'

    opts.on('-d', '--debug', 'Show debug information') do |debug|
        options[:debug] = debug
    end

    opts.on('-c', '--update-cookbooks', 'Update the Chef cookbooks') do |update_cookbooks|
        options[:update_cookbooks] = update_cookbooks
    end

    options[:soloist] = true
    opts.on('--[no-]soloist', 'Run soloist (defaults to yes)') do |soloist|
        options[:soloist] = soloist
    end

    options[:update] = true
    opts.on('--[no-]update', 'Run the Mac tapas update (defaults to yes)') do |update|
        options[:update] = update
    end

    opts.separator ''
    opts.separator 'Common options:'

    opts.on_tail('-h', '--help', 'Show this message') do
        puts opts
        exit
    end

    opts.on_tail('-v', '--version', 'Show version') do
        puts `cat VERSION`
        exit
    end

end.parse!

# Bootstrapping dependencies

unless system("(gem spec bundler -v '~> 1.3.0' > /dev/null 2>&1) || sudo gem install bundler -v '~> 1.3.0' --no-rdoc --no-ri")
    abort 'Failed to install bundler'
end

bundle_command = %w[sudo bundle install --binstubs=bin --without development]
bundle_command << (options[:debug] ? '--verbose' : '--quiet')

warn bundle_command.join(' ') if options[:debug]

unless system *bundle_command
    abort 'There was a problem bootstrapping. Run using --debug for more information'
end

# Add local deps to the load path.

require 'rubygems'
require 'bundler/setup'

# Generate the soloist config
$: << File.join(File.expand_path(File.dirname(__FILE__)), '/lib')
require 'tapas/config'
config = MacTapas::Config.new
soloistrc = {}
soloistrc['cookbook_paths'] = ["#{Dir.pwd}/vendor/cookbooks"]
soloistrc['recipes'] = config.config['recipes']
soloistrc['node_attributes'] = config.config['attributes']
File.open('soloistrc', 'w') do |out|
    YAML.dump(soloistrc, out)
end

unless File.exists?('vendor/cookbooks')
    command = Array.new

    command << %w[install --path=vendor/cookbooks]
    if File.exists?('Cheffile')
        command << '--clean'
        command << options[:debug] ? '--verbose' : '--quiet'
        command.push 'bin/librarian-chef'
    elsif File.exists?('Berksfile')
        command << options[:debug] ? '--debug' : '--quiet'
        command.push 'bin/berks'
    end

    warn command.join(' ') if options[:debug]
    unless system *command
        abort 'Cannot install Chef cookbooks. Run using --debug if you need more information.'
    end
end

if options[:update_cookbooks]
    command = Array.new

    command << 'update'
    if File.exists?('Cheffile')
        command << '--verbose' if options[:debug]
        command.push 'bin/librarian-chef'
    elsif File.exists?('Berksfile')
        command << '--debug' if options[:debug]
        command.push 'bin/berks'
    end

    warn command.join(' ') if options[:debug]
    unless system *command
        abort 'Cannot update Chef cookbooks. Run using --debug if you need more information.'
    end
end

# Run soloist

exit 0 unless options[:soloist]

soloist_command = ['bin/soloist']
ENV['LOG_LEVEL'] = options[:debug] ? 'error' : 'debug'

warn soloist_command.join(' ') if options[:debug]
unless system *soloist_command
    abort 'There was a problem running solist. Run using --debug for more information'
end
